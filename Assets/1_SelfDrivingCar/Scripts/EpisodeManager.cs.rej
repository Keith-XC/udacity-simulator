diff a/Assets/1_SelfDrivingCar/Scripts/EpisodeManager.cs b/Assets/1_SelfDrivingCar/Scripts/EpisodeManager.cs	(rejected hunks)
@@ -44,30 +44,46 @@
 
     private void ProcessEventCommand(CommandData commandData)
     {
-        switch (commandData.command)
+        if (commandData == null || string.IsNullOrEmpty(commandData.command))
         {
-            case "pause_sim":
-                Debug.Log("Processing pause_sim command.");
-                PauseSim();
-                break;
-            case "resume_sim":
-                Debug.Log("Processing resume_sim command.");
-                ResumeSim();
-                break;
-            case "start_episode":
-                Debug.Log("Processing start_episode command.");
-                StartEpisode(commandData);
-                break;
-            case "end_episode":
-                Debug.Log("Processing end_episode command.");
-                EndEpisode();
-                break;
-            default:
-                Debug.Log($"Unknown event command: {commandData.command}");
-                break;
+            Debug.LogWarning("EpisodeManager: Empfangener CommandData ist null oder leer.");
+            return;
+        }
+
+        try
+        {
+            switch (commandData.command.ToLower())
+            {
+                case "pause_sim":
+                    Debug.Log("Processing pause_sim command.");
+                    PauseSim();
+                    break;
+                case "resume_sim":
+                    Debug.Log("Processing resume_sim command.");
+                    ResumeSim();
+                    break;
+                case "start_episode":
+                    Debug.Log("Processing start_episode command.");
+                    StartEpisode(commandData);
+                    break;
+                case "end_episode":
+                    Debug.Log("Processing end_episode command.");
+                    EndEpisode();
+                    break;
+                default:
+                    // Unbekannten Befehl einfach ignorieren oder eine Warnung ausgeben
+                    Debug.Log($"EpisodeManager: Unbekannter Befehl empfangen: {commandData.command}");
+                    break;
+            }
+        }
+        catch (Exception e)
+        {
+            Debug.LogError($"EpisodeManager: Fehler bei der Verarbeitung des Befehls {commandData.command}: {e.Message}");
+            // Exception abfangen, um zu verhindern, dass andere Abonnenten beeintrï¿½chtigt werden
         }
     }
 
+
     public void ResetTrack(
         Track track,
         Weather weather = Weather.Sunny,
